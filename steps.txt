

Commands to setup the repo -- 

export TYPESENSE_API_KEY=test_key

pull the docker images 

docker pull typesense/typesense:29.0.rc30   #use the tags 

docker run -d --name typesense -p 8108:8108 -v$(pwd)/typesense-data:/data typesense/typesense:29.0.rc30 --data-dir /data --api-key=$TYPESENSE_API_KEY --enable-cors         #the data of the typesense and run command 

#the connector in the python
pip install typesense



System reqs -- 

- The Typesense process itself is quite light-weight and only takes up about 20MB of RAM when there's no data indexed. The amount of RAM required is completely dependent on the size of the data you index.
- If the size of your dataset (only including fields you want to search on) is X MB, you'd typically need 2X-3X MB RAM to index the data in Typesense.






Notes -- 


- Typesense is designed to be a secondary data store. Meaning, you want to use another primary database to store the primary copy of your data, where your application writes data into. You'd then sync a copy of the data into Typesense in order to support one of the use-cases above.
- https://typesense.org/docs/guide/installing-a-client.html
- For each field, we define its name, type and whether it's a facet field. A facet field allows us to cluster the search results into categories and lets us drill into each of those categories. We will be seeing faceted results in action at the end of this guide.
- https://github.com/typesense/typesense-python/blob/master/examples/alias_operations.py
- We can make rule for the analytics 
- We can run the muti query for search in the typense 
- https://typesense.org/docs/guide/system-requirements.html#choosing-ram




